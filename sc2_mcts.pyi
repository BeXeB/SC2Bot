from sc2_mcts import *
from enum import Enum

class Mcts:

    def __init__(self, state: State, seed: int, rollout_end_time: int, exploration: float, value_heuristic: ValueHeuristic, rollout_heuristic: RolloutHeuristic) -> Mcts: ...
    def update_root_state(self, state: State) -> None : ...
    def get_root_state(self) -> State: ...
    def get_root_node(self) -> Node: ...
    def to_string(self) -> str: ...
    def start_search_rollout(self, number_of_rollouts: int) -> None: ...
    def start_search(self) -> None: ...
    def stop_search(self) -> None: ...
    def get_best_action(self) -> Action: ...
    def perform_action(self, action:Action) -> None: ...
    def get_number_of_rollouts(self) -> int: ...

def state_builder(minerals: int,
                  vespene: int,
                  worker_population: int,
                  marine_population: int,
                  incoming_workers: int,
                  incoming_marines: int,
                  population_limit:int,
                  bases: list[Base],
                  barracks_amount: int,
                  constructions: list[Construction],
                  occupied_worker_timers: list[int],
                  current_time: int,
                  end_time: int,
                  enemy_combat_units: int,
                  has_house: bool,
                  incoming_house:bool,
                  incoming_bases:int,
                  max_bases: int) -> State : ...

class State:
    def __init__(self): ...
    def to_string(self) -> str: ...
    def get_minerals(self) -> int: ...
    def get_vespene(self) -> int: ...
    def get_incoming_population(self) -> int: ...
    def get_population_limit(self) -> int: ...
    def get_population(self) -> int: ...
    def get_worker_population(self) -> int: ...
    def get_marine_population(self) -> int: ...
    def get_incoming_workers(self) -> int: ...
    def get_incoming_marines(self) -> int: ...
    def get_enemy_units(self) -> int: ...
    def get_occupied_population(self) -> int: ...
    def get_mineral_gained_per_timestep(self) -> int: ...
    def get_vespene_gained_per_timestep(self) -> int: ...
    def get_mineral_workers(self) -> int: ...
    def get_vespene_workers(self) -> int: ...
    def get_constructions(self) -> list[Construction]: ...
    def get_value(self) -> float: ...
    def get_barracks_amount(self) -> int: ...

class Base:
    def __init__(self, id: int,  mineral_fields: int, vespene_geysers: int, vespene_collectors: int): ...
    def __init__(self): ...

class Construction:
    def __init__(self, time_left: int, action: Action): ...
    def get_time_left(self) -> int: ...
    def to_string(self) -> str: ...

class Node:
    def to_string(self) -> str: ...
    def get_state(self) -> State: ...

class Action(Enum):
    none = 0
    build_worker = 1
    build_base = 2
    build_vespene_collector = 3
    build_house = 4
    build_marine = 5
    build_barracks = 6

class ValueHeuristic(Enum):
     UCT = 0
     UCB1Normal2 = 1
     UCB1Normal = 2
     EpsilonGreedy = 3

class RolloutHeuristic(Enum):
    random = 0
    weighted_choice = 1



